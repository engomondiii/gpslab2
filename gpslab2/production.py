"""
Django settings for gpslab2 project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from datetime import timedelta  # For JWT token expiry

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-^@u+u+p5^z6i359+lr@l-4(!p&3nmw3xgz0+7%2fb0gd_w^cn=')

# --- PRODUCTION: turn off debug ---
DEBUG = False

# Add your Vercel domain and localhost to allowed hosts
ALLOWED_HOSTS = ['localhost', '127.0.0.1', '.vercel.app', '.now.sh']

# CORS settings to allow your frontend to access the backend
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third-party apps
    'corsheaders',
    'rest_framework',  # Django REST Framework
    'rest_framework_simplejwt',  # Simple JWT for token authentication

    # Your apps
    'Auths',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # CORS middleware
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Allow CORS for the frontend (React app on Vercel)
CORS_ALLOWED_ORIGINS = [
    "https://gpslab.vercel.app",
    # "http://localhost:3000",        # <-- local (commented for production)
    # "http://127.0.0.1:3000",        # <-- local (commented for production)
]

# If you ever set cookies from the API to the browser, these help prevent CSRF issues
CSRF_TRUSTED_ORIGINS = [
    "https://gpslab.vercel.app",
    # "http://localhost:3000",        # <-- local (commented for production)
    # "http://127.0.0.1:3000",        # <-- local (commented for production)
]

# Static files handling (Whitenoise)
INSTALLED_APPS += [
    'whitenoise.runserver_nostatic',
]

MIDDLEWARE.insert(1, 'whitenoise.middleware.WhiteNoiseMiddleware')

STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Root URL configuration
ROOT_URLCONF = 'gpslab2.urls'  # Updated project name

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # Use a central templates directory
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'gpslab2.wsgi.application'  # Updated project name

# -----------------------------------------------------------------------------
# Database
# Use SQLite by default. When you're ready to use PostgreSQL, uncomment the
# block below and comment out the SQLite config.
# -----------------------------------------------------------------------------

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME', 'postgres'),  # The database name
        'USER': os.getenv('DB_USER', 'postgres.vxlkimobpxdgwfqqrtlj'),  # The user from Supabase
        'PASSWORD': os.getenv('DB_PASSWORD', 'gpslab@gpslab@2025'),  # Password stored in environment variable
        'HOST': os.getenv('DB_HOST', 'aws-0-ap-northeast-2.pooler.supabase.com'),  # The host from Supabase
        'PORT': os.getenv('DB_PORT', '6543'),  # The port from Supabase
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Media files (e.g., uploaded files)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom user model (from Auths app)
AUTH_USER_MODEL = 'Auths.CustomUser'

# DRF Settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}

# JWT Settings
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=600),  # Adjust as needed
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),  # Adjust as needed
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
}

# Email Backend (Gmail) for sending emails
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', 'gpslab@iwl.kr')  # Replace with your email
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', 'nzup lhhh ksba pdji')
DEFAULT_FROM_EMAIL = 'GPS Platform <gpslab@iwl.kr>'

# -------------------------------------------------------------------------
# PRODUCTION SECURITY SETTINGS (active)
# -------------------------------------------------------------------------
SECURE_SSL_REDIRECT = True
SECURE_HSTS_SECONDS = 3600
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True
CSRF_COOKIE_SECURE = True
SESSION_COOKIE_SECURE = True
X_FRAME_OPTIONS = 'DENY'

# If running behind a proxy/edge that terminates TLS (e.g., Vercel, Nginx), this helps Django
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# -------------------------------------------------------------------------
# DEVELOPMENT SECURITY SETTINGS (commented for production)
# -------------------------------------------------------------------------
# DEBUG = True
# CORS_ALLOWED_ORIGINS += [
#     "http://localhost:3000",
#     "http://127.0.0.1:3000",
# ]
# CSRF_TRUSTED_ORIGINS += [
#     "http://localhost:3000",
#     "http://127.0.0.1:3000",
# ]
# SECURE_SSL_REDIRECT = False
# SECURE_HSTS_SECONDS = 0
# SECURE_HSTS_INCLUDE_SUBDOMAINS = False
# SECURE_HSTS_PRELOAD = False
# CSRF_COOKIE_SECURE = False
# SESSION_COOKIE_SECURE = False
# X_FRAME_OPTIONS = 'DENY'

# -------------------------------------------------------------------------
# OAuth (Google / Apple)
# For your current flow (frontend obtains ID token, then POSTs to backend),
# you mostly need the Google Client ID for server-side validation.
# Keep secrets in environment variables in production.
# -------------------------------------------------------------------------
GOOGLE_OAUTH2_CLIENT_ID = os.getenv(
    'GOOGLE_OAUTH2_CLIENT_ID',
    '373141950508-1iosij2n8m952v17u6119g0ire06f2t7.apps.googleusercontent.com'
)

# Not used by the ID-token POST flow, but stored here if you later switch to code flow.
GOOGLE_OAUTH2_CLIENT_SECRET = os.getenv(
    'GOOGLE_OAUTH2_CLIENT_SECRET',
    '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'
)

APPLE_OAUTH2_CLIENT_ID = os.getenv('APPLE_OAUTH2_CLIENT_ID', 'your-apple-client-id')
